@model  WebAnime.Models.ViewModel.Admin.AnimeViewModel
@using WebAnime.Models.Entities;
@{
    ViewBag.Title = "create";
    var ageRatingsList = ViewBag.AgeRating as IEnumerable<AgeRatings>;

    var categoriesList = ((ViewBag.Category as IEnumerable<Categories>) ?? Array.Empty<Categories>()).ToArray();

    var countryList = ViewBag.Country as IEnumerable<Countries>;

    var statusList = ViewBag.Status as IEnumerable<Statuses>;

    var studioList = ((ViewBag.Studio as IEnumerable<Studios>) ?? Array.Empty<Studios>()).ToArray();

    var typeList = ViewBag.Type as IEnumerable<Types>;
}
<h2>Thêm mới Anime</h2>
@using (Html.BeginForm("Create", "Anime", FormMethod.Post, new { area = "Admin" }))
{
    @Html.ValidationSummary(true)
    <div class="row mb-3">
        @Html.LabelFor(x => x.Title, new { @class = "col-form-label col-xl-2 fw-bold" })
        <div class="col-xl-10">
            @Html.TextBoxFor(x => x.Title, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Title, "", new { @class = "text-danger " })
        </div>
    </div>

    <div class="row mb-3">
        @Html.LabelFor(x => x.OriginalTitle, new { @class = "col-form-label col-xl-2 fw-bold" })
        <div class="col-xl-10">
            @Html.TextBoxFor(x => x.OriginalTitle, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.OriginalTitle, "", new { @class = "text-danger " })
        </div>
    </div>
    <div class="row mb-3">
        @Html.LabelFor(x => x.Synopsis, new { @class = "col-form-label col-xl-2 fw-bold" })
        <div class="col-xl-10 position-relative">
            @Html.TextArea("SynopsisCkEditor", new { @class = "form-control" })
            @Html.TextBoxFor(x => x.Synopsis, new { @class = "position-absolute" })
            @Html.ValidationMessageFor(x => x.Synopsis, "", new { @class = "text-danger " })
        </div>
    </div>
    <div class="row mb-3">
        @Html.LabelFor(x => x.Poster, new { @class = "col-form-label col-xl-2 fw-bold" })
        <div class="col-xl-8">
            @Html.TextBoxFor(x => x.Poster, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Poster, "", new { @class = "text-danger " })
        </div>
        <div class="col-xl-2">
            <button type="button" class="btn btn-primary w-100" id="btnPoster">Chọn ảnh</button>
        </div>
    </div>
    <div class="row mb-3">
        @Html.LabelFor(x => x.Duration, new { @class = "col-form-label col-xl-2 fw-bold" })
        <div class="col-xl-10">
            @Html.TextBoxFor(x => x.Duration, new { @class = "form-control", type = "number" })
            @Html.ValidationMessageFor(x => x.Duration, "", new { @class = "text-danger " })
        </div>
    </div>

    <div class="row mb-3 ">
        @Html.LabelFor(x => x.Release, new { @class = "col-form-label col-xl-2 fw-bold" })
        <div class="col-xl-10">
            @Html.Editor("ReleaseDate", new { htmlAttributes = new { @class = "form-control", type = "date" } })
            @Html.EditorFor(x => x.Release, new
            {
                htmlAttributes = new { @class = "position-fixed" }
            })
            @Html.ValidationMessageFor(x => x.Release, "", new { @class = "text-danger", value = DateTime.Now })

        </div>
    </div>

    <div class="row mb-3">
        @Html.LabelFor(x => x.Trailer, new { @class = "col-form-label col-xl-2 fw-bold" })
        <div class="col-xl-10">
            @Html.TextBoxFor(x => x.Trailer, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Trailer, "", new { @class = "text-danger " })
        </div>
    </div>

    <div class="row mb-3">
        @Html.LabelFor(x => x.TotalEpisodes, new { @class = "col-form-label col-xl-2 fw-bold" })
        <div class="col-xl-10">
            @Html.EditorFor(x => x.TotalEpisodes, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(x => x.TotalEpisodes, "", new { @class = "text-danger " })
        </div>
    </div>

    <div class="row mb-3">
        @Html.LabelFor(x => x.StatusId, new { @class = "col-form-label col-xl-2 fw-bold" })
        <div class="col-xl-10">
            @Html.DropDownListFor(x => x.StatusId, new SelectList(statusList, "Id", "Name"), new { @class = "form-select" })
            @Html.ValidationMessageFor(x => x.StatusId, "", new { @class = "text-danger " })
        </div>
    </div>

    <div class="row mb-3">
            @Html.LabelFor(x => x.TypeId, new { @class = "col-form-label col-xl-2 fw-bold" })
            <div class="col-xl-10">
                @Html.DropDownListFor(x => x.TypeId, new SelectList(typeList, "Id", "Name"), new { @class = "form-select" })
                @Html.ValidationMessageFor(x => x.TypeId, "", new { @class = "text-danger " })
            </div>
        </div>

        <div class="row mb-3">
            @Html.LabelFor(x => x.CountryId, new { @class = "col-form-label col-xl-2 fw-bold" })
            <div class="col-xl-10">
                @Html.DropDownListFor(x => x.CountryId, new SelectList(countryList, "Id", "Name"), new { @class = "form-select" })
                @Html.ValidationMessageFor(x => x.CountryId, "", new { @class = "text-danger " })
            </div>
        </div>

        <div class="row mb-3">
            @Html.LabelFor(x => x.AgeRatingId, new { @class = "col-form-label col-xl-2 fw-bold" })
            <div class="col-xl-10">
                @Html.DropDownListFor(x => x.AgeRatingId, new SelectList(ageRatingsList, "Id", "Name"), new { @class = "form-select" })
                @Html.ValidationMessageFor(x => x.AgeRatingId, "", new { @class = "text-danger " })
            </div>
        </div>

        <div class="row mb-3">
            @Html.LabelFor(x => x.CategoriesId, new { @class = "col-form-label col-xl-2 fw-bold" })
            <div class="col-xl-10 position-relative">
                @Html.ListBox("CategoriesIdFake", new MultiSelectList(categoriesList, "Id", "Name"))
                @Html.ListBoxFor(x => x.CategoriesId, new MultiSelectList(categoriesList, "Id", "Name"), new { @class = "position-absolute top-0" })
                @Html.ValidationMessageFor(x => x.CategoriesId, "", new { @class = "text-danger " })
            </div>
        </div>

        <div class="row mb-3">
            @Html.LabelFor(x => x.StudiosId, new { @class = "col-form-label col-xl-2 fw-bold" })
            <div class="col-xl-10 position-relative">
                @Html.ListBox("StudiosIdFake", new MultiSelectList(studioList, "Id", "Name"))
                @Html.ListBoxFor(x => x.StudiosId, new MultiSelectList(studioList, "Id", "Name"), new { @class = "position-absolute top-0" })
                @Html.ValidationMessageFor(x => x.StudiosId, "", new { @class = "text-danger " })
            </div>
        </div>
    <div class="row">
        <div class="col-6">
            <button class="btn btn-primary" type="submit" id="btnCreate">Tạo mới</button>
            @Html.ActionLink("Về trang chủ", "Index", null, new { @class = "btn btn-primary" })

        </div>
    </div>
}

@section footerCss{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

    <link href="~/Resources/Common/jQuery-MultiSelect/jquery.multiselect.css" rel="stylesheet" />
    <style>
        .ms-options-wrap button {
            border-color: rgb(222, 226, 230);
        }

            .ms-options-wrap button span {
                font-size: 16px;
            }

        .ms-options-wrap > button:after {
            right: 15px;
        }

        #Release, #Synopsis, #StudiosId, #CategoriesId {
            width: 0;
            height: 0;
            opacity: 0;
        }
    </style>
}
@section footerJs
{
    @Html.Partial("_ValidationScriptsPartial")
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <script src="~/Resources/Common/jQuery-MultiSelect/jquery.multiselect.js"></script>

    <script>

        const editor = window.CKEDITOR.replace('SynopsisCkEditor');
        CKFinder.setupCKEditor(editor, "/Resources/Common/ckfinder/");
        function getSelectedList(id, fakeId) {
            const selectedIds = [];
            //const selectedList = ;
            $(`#${fakeId}`).val().forEach(x => selectedIds.push(x));

            $(`#${id}`).val(selectedIds);
        }

        $(`#btnCreate`).click(function (e) {
            //e.preventDefault();
            const inputHtml = $(`#SynopsisCkEditor`).val();
            $(`#Synopsis`).val(inputHtml);

            getSelectedList('CategoriesId', 'CategoriesIdFake');
            getSelectedList('StudiosId', 'StudiosIdFake');


            $(`#frmCreateAnime`).submit();
        });

        editor.on('change',
            function () {
                editor.updateElement();
                $(editor.element.$).trigger('change');

            });

        $(`#btnPoster`).click(function () {
            const ckFinder = new CKFinder();
            ckFinder.selectActionFunction = function (fileUrl) {
                $(`#Poster`).val(fileUrl);
            };
            ckFinder.popup();
        });
        $(`#ReleaseDate`).flatpickr({
            altInput: true,
            altFormat: "d/m/Y",
            onChange: function (selectedDate, dateStr) {
                console.log(dateStr);
                $('#Release').val(dateStr);
            }
        });
        $(`select#CategoriesIdFake[multiple]`).multiselect({
            columns: 4,
            texts: {
                placeholder: 'Chọn thể loại'
            },
            search: true,
            searchOptions:
            {
                searchText: true
            },
            minHeight: 120
        });
        $(`select#StudiosIdFake[multiple]`).multiselect({
            columns: 4,
            search: true,
            searchOptions:
            {
                searchText: true
            },
            texts: {
                placeholder: 'Chọn nhà sản xuất'

            },
            minHeight: 120
        });

        const listMultiSelect = document.querySelectorAll(`.ms-options-wrap button`);
        for (const item of listMultiSelect) {
            item.classList.add(`form-control`);
            item.classList.add(`border-1`);
            item.classList.add(`p-2`);
        }
    </script>

}


